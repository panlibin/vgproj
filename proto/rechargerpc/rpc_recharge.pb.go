// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rechargerpc/rpc_recharge.proto

package rechargerpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
	globalrpc "vgproj/proto/globalrpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("rechargerpc/rpc_recharge.proto", fileDescriptor_b5971b9c72eb4400)
}

var fileDescriptor_b5971b9c72eb4400 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2b, 0x4a, 0x4d, 0xce,
	0x48, 0x2c, 0x4a, 0x4f, 0x2d, 0x2a, 0x48, 0xd6, 0x2f, 0x2a, 0x48, 0x8e, 0x87, 0xf1, 0xf5, 0x0a,
	0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xb8, 0x91, 0xe4, 0xa5, 0xc4, 0xd3, 0x73, 0xf2, 0x93, 0x12, 0x73,
	0x40, 0x4a, 0x73, 0x8b, 0xd3, 0xe3, 0xf3, 0xf2, 0x0b, 0x20, 0xaa, 0xa4, 0xe4, 0x51, 0x25, 0x8a,
	0x53, 0x8b, 0xca, 0x52, 0x8b, 0xe2, 0x13, 0x4b, 0x4b, 0x32, 0xa0, 0x0a, 0x50, 0xac, 0x01, 0x29,
	0x41, 0xb5, 0xc6, 0xa8, 0x83, 0x91, 0x8b, 0x23, 0x08, 0x2a, 0x24, 0x64, 0xcc, 0xc5, 0xe2, 0x58,
	0x5a, 0x92, 0x21, 0x24, 0xad, 0x07, 0x37, 0x56, 0xcf, 0x2f, 0xbf, 0x24, 0x33, 0xad, 0x32, 0x18,
	0x6c, 0x30, 0x48, 0x52, 0x8a, 0x0f, 0x49, 0x32, 0x2f, 0xbf, 0x40, 0xc8, 0x9d, 0x8b, 0xdb, 0xb9,
	0x28, 0x35, 0xb1, 0x24, 0xd5, 0xbf, 0x28, 0x25, 0xb5, 0x48, 0x48, 0x5a, 0x0f, 0xc9, 0x46, 0xbd,
	0xa0, 0xd4, 0x42, 0x24, 0x49, 0x29, 0x34, 0xc9, 0xe2, 0x02, 0x24, 0x49, 0x27, 0xa9, 0x28, 0x89,
	0xb2, 0xf4, 0x82, 0xa2, 0xfc, 0x2c, 0x7d, 0xb0, 0xd3, 0xf4, 0x91, 0x94, 0x26, 0xb1, 0x81, 0x85,
	0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9f, 0xef, 0x67, 0xfc, 0x36, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RechargeClient is the client API for Recharge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RechargeClient interface {
	Auth(ctx context.Context, in *globalrpc.NotifyServerAuth, opts ...grpc.CallOption) (*globalrpc.Nop, error)
	CreateOrder(ctx context.Context, in *ReqCreateOrder, opts ...grpc.CallOption) (*RspCreateOrder, error)
}

type rechargeClient struct {
	cc grpc.ClientConnInterface
}

func NewRechargeClient(cc grpc.ClientConnInterface) RechargeClient {
	return &rechargeClient{cc}
}

func (c *rechargeClient) Auth(ctx context.Context, in *globalrpc.NotifyServerAuth, opts ...grpc.CallOption) (*globalrpc.Nop, error) {
	out := new(globalrpc.Nop)
	err := c.cc.Invoke(ctx, "/rechargerpc.Recharge/Auth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rechargeClient) CreateOrder(ctx context.Context, in *ReqCreateOrder, opts ...grpc.CallOption) (*RspCreateOrder, error) {
	out := new(RspCreateOrder)
	err := c.cc.Invoke(ctx, "/rechargerpc.Recharge/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RechargeServer is the server API for Recharge service.
type RechargeServer interface {
	Auth(context.Context, *globalrpc.NotifyServerAuth) (*globalrpc.Nop, error)
	CreateOrder(context.Context, *ReqCreateOrder) (*RspCreateOrder, error)
}

// UnimplementedRechargeServer can be embedded to have forward compatible implementations.
type UnimplementedRechargeServer struct {
}

func (*UnimplementedRechargeServer) Auth(ctx context.Context, req *globalrpc.NotifyServerAuth) (*globalrpc.Nop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (*UnimplementedRechargeServer) CreateOrder(ctx context.Context, req *ReqCreateOrder) (*RspCreateOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}

func RegisterRechargeServer(s *grpc.Server, srv RechargeServer) {
	s.RegisterService(&_Recharge_serviceDesc, srv)
}

func _Recharge_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(globalrpc.NotifyServerAuth)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RechargeServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rechargerpc.Recharge/Auth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RechargeServer).Auth(ctx, req.(*globalrpc.NotifyServerAuth))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recharge_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RechargeServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rechargerpc.Recharge/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RechargeServer).CreateOrder(ctx, req.(*ReqCreateOrder))
	}
	return interceptor(ctx, in, info, handler)
}

var _Recharge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rechargerpc.Recharge",
	HandlerType: (*RechargeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _Recharge_Auth_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _Recharge_CreateOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rechargerpc/rpc_recharge.proto",
}
